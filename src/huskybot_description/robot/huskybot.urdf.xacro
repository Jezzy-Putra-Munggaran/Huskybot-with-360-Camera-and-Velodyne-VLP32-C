<?xml version="1.0"?>  <!-- Header XML standar, wajib untuk file XML -->
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="husky_with_cameras">  <!-- Root elemen robot, pakai Xacro, nama robot unik -->

  <!-- Include Husky base dari package husky_description -->
  <xacro:include filename="$(find husky_description)/urdf/husky.urdf.xacro"/>  <!-- Import base Husky agar semua link/joint dasar tersedia, pastikan package husky_description sudah ada di workspace -->

  <!-- ==================== PLUGIN GAZEBO ==================== -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control"> <!-- Plugin ros2_control untuk integrasi controller ROS2 -->
      <robotNamespace>/huskybot</robotNamespace>                          <!-- Namespace ROS robot (harus konsisten dengan node kontrol di huskybot_control) -->
      <robotParam>/robot_description</robotParam>                         <!-- Param robot_description (untuk robot_state_publisher) -->
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>   <!-- Tipe hardware simulation Gazebo -->
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller"> <!-- Plugin diff_drive untuk cmd_vel dan odom -->
      <ros>
        <namespace>/huskybot</namespace>                                 <!-- Namespace ROS robot, harus konsisten dengan node kontrol -->
      </ros>
      <left_joint>joint_right_wheel</left_joint>                         <!-- Joint kiri (cek urutan di base) -->
      <right_joint>joint_left_wheel</right_joint>                        <!-- Joint kanan (cek urutan di base) -->
      <wheel_separation>0.1</wheel_separation>                           <!-- Jarak antar roda (cek real robot) -->
      <wheel_diameter>0.025</wheel_diameter>                             <!-- Diameter roda (cek real robot) -->
      <max_wheel_torque>0.1</max_wheel_torque>                           <!-- Torsi maksimum roda -->
      <max_wheel_acceleration>1.0</max_wheel_acceleration>               <!-- Akselerasi maksimum roda -->
      <publish_odom>true</publish_odom>                                  <!-- Publish odometry ke ROS -->
      <publish_odom_tf>true</publish_odom_tf>                            <!-- Publish TF odometry -->
      <odometry_frame>odom</odometry_frame>                              <!-- Nama frame odometry -->
      <robot_base_frame>chassis</robot_base_frame>                       <!-- Nama frame base robot -->
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_imu.so" name="gazebo_ros_imu_controller"> <!-- Plugin IMU -->
      <robotNamespace>/huskybot/</robotNamespace>                        <!-- Namespace ROS robot -->
      <topicName>imu/data</topicName>                                   <!-- Topic output IMU (samakan dengan workspace) -->
      <serviceName>imu/service</serviceName>                            <!-- Nama service IMU -->
      <bodyName>chassis</bodyName>                                      <!-- Link tempat IMU dipasang -->
      <gaussianNoise>0.01</gaussianNoise>                               <!-- Noise IMU (bisa diatur sesuai kebutuhan) -->
      <rpyOffsets>0 0 0</rpyOffsets>                                    <!-- Offset rotasi IMU -->
      <updateRate>50.0</updateRate>                                     <!-- Frekuensi update IMU -->
      <alwaysOn>true</alwaysOn>                                         <!-- IMU selalu aktif -->
    </plugin>
  </gazebo>

  <!-- ==================== TOWER 3 TINGKAT ==================== -->

  <!-- 1. Box Jetson Orin (paling bawah tower, warna hitam) -->
  <link name="orin_box_link">  <!-- Link untuk box Jetson Orin -->
    <visual>
      <geometry>
        <box size="0.25 0.18 0.09"/>  <!-- Dimensi box -->
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>  <!-- Warna hitam -->
      </material>
      <origin xyz="0.0 0 0.045" rpy="0 0 0"/>  <!-- Posisi relatif di robot -->
    </visual>
    <collision>
      <geometry>
        <box size="0.25 0.18 0.09"/>
      </geometry>
      <origin xyz="0.0 0 0.045" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="2.0"/>
      <origin xyz="0.0 0 0.045"/>
      <inertia ixx="0.02" ixy="0" ixz="0" iyy="0.02" iyz="0" izz="0.02"/>
    </inertial>
  </link>
  <joint name="orin_box_joint" type="fixed">  <!-- Joint fixed ke top_plate_link -->
    <parent link="top_plate_link"/>
    <child link="orin_box_link"/>
    <origin xyz="0 0 0.03" rpy="0 0 0"/>
  </joint>

  <!-- 2. Tower Hexagonal Bawah (prisma segi enam, warna hitam, tingkat 1) -->
  <link name="hex_tower_lower_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.22 0.22 0.18"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.22 0.22 0.18"/>
      </geometry>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.7"/>
      <origin xyz="0 0 0.09"/>
      <inertia ixx="0.007" ixy="0" ixz="0" iyy="0.007" iyz="0" izz="0.007"/>
    </inertial>
  </link>
  <joint name="hex_tower_lower_joint" type="fixed">
    <parent link="orin_box_link"/>
    <child link="hex_tower_lower_link"/>
    <origin xyz="0 0 0.09" rpy="0 0 0"/>
  </joint>

  <!-- 3. Tower Hexagonal Atas (prisma segi enam, warna hitam, tingkat 2) -->
  <link name="hex_tower_upper_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.18 0.18 0.18"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.18 0.18 0.18"/>
      </geometry>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.09"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="hex_tower_upper_joint" type="fixed">
    <parent link="hex_tower_lower_link"/>
    <child link="hex_tower_upper_link"/>
    <origin xyz="0 0 0.18" rpy="0 0 0"/>
  </joint>

  <!-- 4. Tatakan Silinder LiDAR (paling atas tower, warna hitam, tingkat 3) -->
  <link name="lidar_base_link">
    <visual>
      <geometry>
        <cylinder length="0.04" radius="0.09"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.11" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.04" radius="0.09"/>
      </geometry>
      <origin xyz="0 0 0.11" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.11"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="lidar_base_joint" type="fixed">
    <parent link="hex_tower_upper_link"/>
    <child link="lidar_base_link"/>
    <origin xyz="0 0 0.18" rpy="0 0 0"/>
  </joint>

  <!-- 5. Velodyne VLP-32C (paling atas) -->
  <link name="velodyne_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/velodyne_vlp32c.dae" scale="1 1 1"/>
      </geometry>
      <material name="grey">
        <color rgba="0.3 0.3 0.3 1"/>
      </material>
      <origin xyz="0 0 0.06" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.09" radius="0.06"/>
      </geometry>
      <origin xyz="0 0 0.06" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.06"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="velodyne_joint" type="fixed">
    <parent link="lidar_base_link"/>
    <child link="velodyne_link"/>
    <origin xyz="0 0 0.065" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo plugin Velodyne -->
  <gazebo reference="velodyne_link">
    <sensor type="gpu_ray" name="velodyne">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1800</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
          <vertical>
            <samples>32</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799</min_angle>
            <max_angle>0.261799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.5</min>
          <max>100.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="velodyne_plugin" filename="libgazebo_ros_ray_sensor.so">
        <topicName>/velodyne_points</topicName>  <!-- Topic pointcloud hasil Velodyne, harus konsisten dengan node mapping/fusion -->
        <frameName>velodyne_link</frameName>      <!-- Nama frame sensor, harus konsisten dengan TF -->
      </plugin>
    </sensor>
  </gazebo>

  <!-- ==================== KAMERA HEXAGONAL ==================== -->
  <!-- Macro untuk kamera di sisi tower heksagonal -->
  <xacro:macro name="hex_camera" params="idx yaw_deg">
    <link name="camera_${idx}_link">
      <visual>
        <geometry>
          <mesh filename="package://huskybot_description/meshes/arducam_imx477.dae" scale="1 1 1"/>
        </geometry>
        <material name="black">
          <color rgba="0 0 0 1"/>
        </material>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </visual>
      <inertial>
        <mass value="0.1"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
      </inertial>
    </link>
    <joint name="camera_${idx}_joint" type="fixed">
      <parent link="hex_tower_upper_link"/>
      <child link="camera_${idx}_link"/>
      <origin xyz="${0.11 * cos(yaw_deg * 3.14159 / 180)} ${0.11 * sin(yaw_deg * 3.14159 / 180)} 0.09"
              rpy="0 0 ${yaw_deg * 3.14159 / 180}"/>
    </joint>
    <gazebo reference="camera_${idx}_link">
      <sensor type="camera" name="camera_${idx}">
        <pose>0 0 0 0 0 0</pose>
        <update_rate>30</update_rate>
        <camera>
          <horizontal_fov>1.3962634</horizontal_fov> <!-- 80 derajat -->
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
        </camera>
        <always_on>true</always_on>
        <visualize>true</visualize>
        <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
          <camera_name>camera_${idx}</camera_name>
          <image_topic_name>image_raw</image_topic_name> <!-- Topic kamera konsisten, akan di-remap di display.launch.py -->
          <camera_info_topic_name>camera_info</camera_info_topic_name>
          <frame_name>camera_${idx}_link</frame_name>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Instantiate 6 cameras di sisi tower heksagonal (0, 60, 120, 180, 240, 300 derajat) -->
  <xacro:hex_camera idx="front"    yaw_deg="0"/>         <!-- Kamera depan -->
  <xacro:hex_camera idx="front_left"  yaw_deg="60"/>     <!-- Kamera depan kiri -->
  <xacro:hex_camera idx="left"     yaw_deg="120"/>       <!-- Kamera kiri -->
  <xacro:hex_camera idx="rear"     yaw_deg="180"/>       <!-- Kamera belakang -->
  <xacro:hex_camera idx="rear_right"  yaw_deg="240"/>    <!-- Kamera belakang kanan -->
  <xacro:hex_camera idx="right"    yaw_deg="300"/>       <!-- Kamera kanan -->

  <!--
    Kalibrasi extrinsic kamera-LiDAR:
    Simpan file transformasi di calibration/extrinsic_lidar_to_camera.yaml
    Contoh format:
      T_lidar_camera:
        rows: 4
        cols: 4
        data: [ ... 16 nilai matriks ... ]
    Dokumentasikan transformasi ini di README dan gunakan untuk fusion 2D-3D.
  -->

</robot>