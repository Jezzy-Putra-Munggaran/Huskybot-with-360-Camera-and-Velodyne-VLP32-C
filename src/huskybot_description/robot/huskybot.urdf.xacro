<?xml version="1.0"?> <!-- Header XML wajib untuk file XML -->
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="husky_with_cameras"> <!-- Root elemen robot, pakai Xacro, nama robot unik -->

  <!-- ==================== INCLUDE BASE HUSKY ==================== -->
  <!-- Import base Husky agar semua link/joint dasar tersedia -->
  <xacro:include filename="$(find husky_description)/urdf/husky.urdf.xacro"/> <!-- Pastikan package husky_description sudah di-build dan path benar -->

  <!-- ==================== PLUGIN GAZEBO ==================== -->
  <gazebo>
    <!-- Plugin ros2_control untuk integrasi controller ROS2 -->
    <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros_control">
      <robotNamespace>/huskybot</robotNamespace> <!-- Namespace ROS robot (harus konsisten dengan node kontrol di huskybot_control) -->
      <robotParam>/robot_description</robotParam> <!-- Param robot_description (untuk robot_state_publisher) -->
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType> <!-- Tipe hardware simulation Gazebo -->
      <!-- ERROR HANDLING: Pastikan plugin sudah di-build dan path sudah di-export ke $GAZEBO_PLUGIN_PATH -->
    </plugin>
  </gazebo>

  <!-- ==================== TAG ros2_control (WAJIB) ==================== -->
  <!-- Tag ros2_control untuk integrasi dengan ros2_control dan controller_manager -->
  <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin> <!-- Plugin hardware simulation Gazebo -->
    </hardware>
    <!-- Joint roda kiri depan -->
    <joint name="front_left_wheel_joint">
      <command_interface name="velocity"/> <!-- Interface kontrol kecepatan -->
      <state_interface name="position"/> <!-- Interface baca posisi -->
      <state_interface name="velocity"/> <!-- Interface baca kecepatan -->
    </joint>
    <!-- Joint roda kanan depan -->
    <joint name="front_right_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <!-- Joint roda kiri belakang -->
    <joint name="rear_left_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <!-- Joint roda kanan belakang -->
    <joint name="rear_right_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control>

  <!-- ==================== SENSOR IMU ==================== -->
  <!-- Sensor IMU pada link imu_link -->
  <gazebo reference="imu_link">
    <sensor type="imu" name="imu_sensor">
      <always_on>true</always_on> <!-- IMU selalu aktif -->
      <update_rate>50</update_rate> <!-- Update rate IMU (Hz) -->
      <plugin name="imu_sensor_plugin" filename="libgazebo_ros_imu_sensor.so"> <!-- Plugin IMU ROS2 -->
        <ros>
          <namespace>/huskybot</namespace> <!-- Namespace ROS untuk topic IMU -->
        </ros>
        <frame_name>imu_link</frame_name> <!-- Nama frame IMU -->
        <topicName>imu/data</topicName> <!-- Topic IMU di ROS2 -->
        <!-- ERROR HANDLING: Pastikan plugin sudah di-build dan path sudah di-export ke $GAZEBO_PLUGIN_PATH -->
      </plugin>
    </sensor>
  </gazebo>

  <!-- ==================== SENSOR GPS ==================== -->
  <!-- Sensor GPS pada link gps_link -->
  <!--
    ERROR HANDLING:
    - Jangan deklarasi ulang <link name="gps_link"/> dan joint jika sudah ada di base Husky!
    - Jika ingin custom posisi, override joint dengan nama berbeda atau gunakan xacro argumen.
    - Jika tetap ingin custom, pastikan hanya ada SATU link dengan nama gps_link di seluruh URDF!
  -->
  <gazebo reference="gps_link">
    <sensor type="gps" name="gps_sensor">
      <always_on>true</always_on> <!-- GPS selalu aktif -->
      <update_rate>10</update_rate> <!-- Update rate GPS (Hz) -->
      <plugin name="gps_sensor_plugin" filename="libgazebo_ros_gps_sensor.so"> <!-- Plugin GPS ROS2 native -->
        <ros>
          <namespace>/huskybot</namespace> <!-- Namespace ROS untuk topic GPS -->
        </ros>
        <frame_name>gps_link</frame_name> <!-- Nama frame GPS -->
        <topicName>gps/fix</topicName> <!-- Topic GPS fix -->
        <velocityTopicName>gps/vel</velocityTopicName> <!-- Topic GPS velocity -->
        <!-- ERROR HANDLING: Pastikan plugin sudah di-build dan path sudah di-export ke $GAZEBO_PLUGIN_PATH -->
      </plugin>
    </sensor>
  </gazebo>
  <!--
    <link name="gps_link"/> dan joint gps_joint DIHAPUS agar tidak duplikat!
    Jika ingin custom mounting, edit di base Husky atau override dengan xacro argumen.
  -->

  <!-- ==================== TOWER 3 TINGKAT ==================== -->
  <!-- 1. Box Jetson Orin (paling bawah tower, warna hitam) -->
  <link name="orin_box_link">
    <visual>
      <geometry>
        <box size="0.25 0.18 0.09"/> <!-- Ukuran box Jetson Orin -->
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/> <!-- Warna hitam -->
      </material>
      <origin xyz="0.0 0 0.045" rpy="0 0 0"/> <!-- Posisi box -->
    </visual>
    <collision>
      <geometry>
        <box size="0.25 0.18 0.09"/>
      </geometry>
      <origin xyz="0.0 0 0.045" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="2.0"/> <!-- Massa box -->
      <origin xyz="0.0 0 0.045"/>
      <inertia ixx="0.02" ixy="0" ixz="0" iyy="0.02" iyz="0" izz="0.02"/>
    </inertial>
  </link>
  <joint name="orin_box_joint" type="fixed">
    <parent link="top_plate_link"/> <!-- Hubungkan ke top_plate_link dari base Husky -->
    <child link="orin_box_link"/>
    <origin xyz="0 0 0.03" rpy="0 0 0"/>
  </joint>

  <!-- 2. Tower Hexagonal Bawah -->
  <link name="hex_tower_lower_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.22 0.22 0.18"/> <!-- Mesh tower bawah -->
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.22 0.22 0.18"/>
      </geometry>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.7"/>
      <origin xyz="0 0 0.09"/>
      <inertia ixx="0.007" ixy="0" ixz="0" iyy="0.007" iyz="0" izz="0.007"/>
    </inertial>
  </link>
  <joint name="hex_tower_lower_joint" type="fixed">
    <parent link="orin_box_link"/>
    <child link="hex_tower_lower_link"/>
    <origin xyz="0 0 0.09" rpy="0 0 0"/>
  </joint>

  <!-- 3. Tower Hexagonal Atas -->
  <link name="hex_tower_upper_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.18 0.18 0.18"/> <!-- Mesh tower atas -->
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.18 0.18 0.18"/>
      </geometry>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.09"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="hex_tower_upper_joint" type="fixed">
    <parent link="hex_tower_lower_link"/>
    <child link="hex_tower_upper_link"/>
    <origin xyz="0 0 0.18" rpy="0 0 0"/>
  </joint>

  <!-- 4. Tatakan Silinder LiDAR -->
  <link name="lidar_base_link">
    <visual>
      <geometry>
        <cylinder length="0.04" radius="0.09"/> <!-- Tatakan silinder LiDAR -->
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.11" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.04" radius="0.09"/>
      </geometry>
      <origin xyz="0 0 0.11" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.11"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="lidar_base_joint" type="fixed">
    <parent link="hex_tower_upper_link"/>
    <child link="lidar_base_link"/>
    <origin xyz="0 0 0.18" rpy="0 0 0"/>
  </joint>

  <!-- 5. Velodyne VLP-32C -->
  <link name="velodyne_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/velodyne_vlp32c.dae" scale="1 1 1"/> <!-- Mesh Velodyne -->
      </geometry>
      <material name="grey">
        <color rgba="0.3 0.3 0.3 1"/>
      </material>
      <origin xyz="0 0 0.06" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.09" radius="0.06"/>
      </geometry>
      <origin xyz="0 0 0.06" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.06"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="velodyne_joint" type="fixed">
    <parent link="lidar_base_link"/>
    <child link="velodyne_link"/>
    <origin xyz="0 0 0.065" rpy="0 0 0"/>
  </joint>
  <!-- Gazebo plugin Velodyne -->
  <gazebo reference="velodyne_link">
    <sensor type="gpu_ray" name="velodyne">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1800</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
          <vertical>
            <samples>32</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799</min_angle>
            <max_angle>0.261799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.5</min>
          <max>100.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="velodyne_plugin" filename="libgazebo_ros_ray_sensor.so">
        <topicName>/velodyne_points</topicName>
        <frameName>velodyne_link</frameName>
        <!-- ERROR HANDLING: Pastikan plugin sudah di-build dan path sudah di-export ke $GAZEBO_PLUGIN_PATH -->
      </plugin>
    </sensor>
  </gazebo>

  <!-- ==================== KAMERA HEXAGONAL (FULL OOP) ==================== -->
  <!-- Macro untuk kamera di sisi tower heksagonal -->
  <xacro:macro name="hex_camera" params="idx yaw_deg">
    <link name="camera_${idx}_link">
      <visual>
        <geometry>
          <mesh filename="package://huskybot_description/meshes/arducam_imx477.dae" scale="1 1 1"/> <!-- Mesh kamera -->
        </geometry>
        <material name="black">
          <color rgba="0 0 0 1"/>
        </material>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </visual>
      <inertial>
        <mass value="0.1"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
      </inertial>
    </link>
    <joint name="camera_${idx}_joint" type="fixed">
      <parent link="hex_tower_upper_link"/>
      <child link="camera_${idx}_link"/>
      <!-- Posisi kamera di sisi tower heksagonal -->
      <origin xyz="${0.11 * cos(yaw_deg * 3.14159 / 180)} ${0.11 * sin(yaw_deg * 3.14159 / 180)} 0.09"
              rpy="0 0 ${yaw_deg * 3.14159 / 180}"/>
    </joint>
    <gazebo reference="camera_${idx}_link">
      <sensor type="camera" name="camera_${idx}">
        <pose>0 0 0 0 0 0</pose>
        <update_rate>30</update_rate>
        <camera>
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
        </camera>
        <always_on>true</always_on>
        <visualize>true</visualize>
        <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
          <camera_name>camera_${idx}</camera_name>
          <image_topic_name>image_raw</image_topic_name>
          <camera_info_topic_name>camera_info</camera_info_topic_name>
          <frame_name>camera_${idx}_link</frame_name>
          <!-- ERROR HANDLING: Pastikan plugin sudah di-build dan path sudah di-export ke $GAZEBO_PLUGIN_PATH -->
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Instantiate 6 cameras di sisi tower heksagonal (0, 60, 120, 180, 240, 300 derajat) -->
  <xacro:hex_camera idx="front"    yaw_deg="0"/> <!-- Kamera depan -->
  <xacro:hex_camera idx="front_left"  yaw_deg="60"/> <!-- Kamera depan kiri -->
  <xacro:hex_camera idx="left"     yaw_deg="120"/> <!-- Kamera kiri -->
  <xacro:hex_camera idx="rear"     yaw_deg="180"/> <!-- Kamera belakang -->
  <xacro:hex_camera idx="rear_right"  yaw_deg="240"/> <!-- Kamera belakang kanan -->
  <xacro:hex_camera idx="right"    yaw_deg="300"/> <!-- Kamera kanan -->

  <!--
    Kalibrasi extrinsic kamera-LiDAR:
    Simpan file transformasi di huskybot_calibration/config/extrinsic_lidar_to_camera.yaml
    Contoh format:
      T_lidar_camera:
        rows: 4
        cols: 4
        data: [ ... 16 nilai matriks ... ]
    Dokumentasikan transformasi ini di README dan gunakan untuk fusion 2D-3D.
    ERROR HANDLING: Pastikan file YAML kalibrasi sudah ada dan path benar, jika tidak node fusion akan error.
  -->

</robot>