<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="husky_with_cameras">

  <!-- Include Husky base from husky_description -->
  <xacro:include filename="$(find husky_description)/urdf/description.urdf.xacro"/>
  <xacro:include filename="$(find husky_description)/urdf/husky.urdf.xacro"/>
  <!-- <xacro:husky_robot/> -->

  <!-- 1. Box Jetson Orin (paling bawah tower, warna hitam) -->
  <link name="orin_box_link">
    <visual>
      <geometry>
        <box size="0.25 0.18 0.09"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0.0 0 0.045" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.25 0.18 0.09"/>
      </geometry>
      <origin xyz="0.0 0 0.045" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="2.0"/>
      <origin xyz="0.0 0 0.045"/>
      <inertia ixx="0.02" ixy="0" ixz="0" iyy="0.02" iyz="0" izz="0.02"/>
    </inertial>
  </link>
  <joint name="orin_box_joint" type="fixed">
    <parent link="top_plate_link"/>
    <child link="orin_box_link"/>
    <origin xyz="0 0 0.03" rpy="0 0 0"/>
  </joint>

  <!-- 2. Tower Hexagonal (prisma segi enam, warna hitam) -->
  <link name="hex_tower_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.22 0.22 0.38"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.07" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/hexagonal-prism.stl" scale="0.22 0.22 0.38"/>
      </geometry>
      <origin xyz="0 0 0.07" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="1.0"/>
      <origin xyz="0 0 0.07"/>
      <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
    </inertial>
  </link>
  <joint name="hex_tower_joint" type="fixed">
    <parent link="orin_box_link"/>
    <child link="hex_tower_link"/>
    <origin xyz="0 0 0.07" rpy="0 0 0"/>
  </joint>

  <!-- 3. Tatakan Silinder LiDAR (warna hitam) -->
  <link name="lidar_base_link">
    <visual>
      <geometry>
        <cylinder length="0.04" radius="0.09"/>
      </geometry>
      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
      <origin xyz="0 0 0.21" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.04" radius="0.09"/>
      </geometry>
      <origin xyz="0 0 0.21" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.21"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="lidar_base_joint" type="fixed">
    <parent link="hex_tower_link"/>
    <child link="lidar_base_link"/>
    <origin xyz="0 0 0.19" rpy="0 0 0"/>
  </joint>

  <!-- 4. Velodyne VLP-32C (simulasi, gunakan mesh realistik jika ada) -->
  <link name="velodyne_link">
    <visual>
      <geometry>
        <mesh filename="package://huskybot_description/meshes/velodyne_vlp32c.dae" scale="1 1 1"/>
      </geometry>
      <material name="grey">
        <color rgba="0.3 0.3 0.3 1"/>
      </material>
      <origin xyz="0 0 0.06" rpy="0 0 0"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.09" radius="0.06"/>
      </geometry>
      <origin xyz="0 0 0.06" rpy="0 0 0"/>
    </collision>
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0.06"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
  </link>
  <joint name="velodyne_joint" type="fixed">
    <parent link="lidar_base_link"/>
    <child link="velodyne_link"/>
    <origin xyz="0 0 0.065" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo plugin Velodyne -->
  <gazebo reference="velodyne_link">
    <sensor type="gpu_ray" name="velodyne">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1800</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
          <vertical>
            <samples>32</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799</min_angle>
            <max_angle>0.261799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.5</min>
          <max>100.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="velodyne_plugin" filename="libgazebo_ros_gpu_laser.so">
        <topicName>/velodyne_points</topicName>
        <frameName>velodyne_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Macro untuk kamera di sisi tower heksagonal -->
  <xacro:macro name="hex_camera" params="idx yaw_deg">
    <link name="camera_${idx}_link">
      <visual>
        <geometry>
          <mesh filename="package://huskybot_description/meshes/arducam_imx477.dae" scale="1 1 1"/>
        </geometry>
        <material name="black">
          <color rgba="0 0 0 1"/>
        </material>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </visual>
    </link>
    <joint name="camera_${idx}_joint" type="fixed">
      <parent link="hex_tower_link"/>
      <child link="camera_${idx}_link"/>
      <origin xyz="${0.11 * cos(yaw_deg * 3.14159 / 180)} ${0.11 * sin(yaw_deg * 3.14159 / 180)} 0.09"
              rpy="0 0 ${yaw_deg * 3.14159 / 180}"/>
    </joint>
    <gazebo reference="camera_${idx}_link">
      <sensor type="camera" name="camera_${idx}">
        <pose>0 0 0 0 0 0</pose>
        <update_rate>30</update_rate>
        <camera>
          <horizontal_fov>1.3962634</horizontal_fov> <!-- 80 derajat -->
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
        </camera>
        <always_on>true</always_on>
        <visualize>true</visualize>
        <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
          <camera_name>camera_${idx}</camera_name>
          <image_topic_name>image_raw</image_topic_name>
          <camera_info_topic_name>camera_info</camera_info_topic_name>
          <frame_name>camera_${idx}_link</frame_name>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Instantiate 6 cameras di sisi tower heksagonal (0, 60, 120, 180, 240, 300 derajat) -->
  <xacro:hex_camera idx="front"    yaw_deg="0"/>
  <xacro:hex_camera idx="front_left"  yaw_deg="60"/>
  <xacro:hex_camera idx="left"     yaw_deg="120"/>
  <xacro:hex_camera idx="rear"     yaw_deg="180"/>
  <xacro:hex_camera idx="rear_right"  yaw_deg="240"/>
  <xacro:hex_camera idx="right"    yaw_deg="300"/>

  <!--
    Kalibrasi extrinsic kamera-LiDAR:
    Simpan file transformasi di calibration/extrinsic_lidar_to_camera.yaml
    Contoh format:
      T_lidar_camera:
        rows: 4
        cols: 4
        data: [ ... 16 nilai matriks ... ]
    Dokumentasikan transformasi ini di README dan gunakan untuk fusion 2D-3D.
  -->

</robot>